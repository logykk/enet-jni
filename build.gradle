plugins {
    id 'java'
    id 'c'
    id 'maven-publish'
}

group = 'logykk.enet'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

def buildArch = project.hasProperty('buildArch') ? project.property('buildArch') : System.getProperty("os.arch").toLowerCase()
def isArm64 = buildArch == 'arm64' || buildArch == 'aarch64'

model {
    components {
        'enet-jni'(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir "src/main/c"
                        include "**/*.c"
                    }
                    exportedHeaders {
                        srcDir "src/main/c"
                    }
                }
            }
            
            binaries.all {
                if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "/I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "/I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "ws2_32.lib", "winmm.lib"

                    if (isArm64) {
                        cCompiler.args "/D_ARM64_"
                    }
                } else if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"

                    if (isArm64) {
                        cCompiler.args "-arch", "arm64"
                        linker.args "-arch", "arm64"
                    }
                } else {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"

                    if (isArm64) {
                        cCompiler.args "-march=armv8-a"
                    }
                }
            }
        }
    }
}

tasks.register('extractNativeLib') {
    dependsOn 'enet-jniSharedLibrary'

    doLast {
        def nativeLibDir = file("${buildDir}/native-libs")
        nativeLibDir.mkdirs()

        def platformDir
        def targetFileName
        def archSuffix = isArm64 ? "arm64" : "x86-64"
        
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            platformDir = "natives/windows-${archSuffix}"
            targetFileName = 'enet-jni.dll'
        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            platformDir = "natives/macos-${archSuffix}"
            targetFileName = 'libenet-jni.dylib'
        } else {
            platformDir = "natives/linux-${archSuffix}"
            targetFileName = 'libenet-jni.so'
        }

        def platformResourceDir = file("src/main/resources/${platformDir}")
        platformResourceDir.mkdirs()

        copy {
            from 'build/libs/enet-jni/shared'
            into nativeLibDir

            rename { String fileName ->
                if (fileName.endsWith('.dll')) {
                    return 'enet-jni.dll'
                } else if (fileName.endsWith('.so')) {
                    return 'libenet-jni.so'
                } else if (fileName.endsWith('.dylib')) {
                    return 'libenet-jni.dylib'
                }
                return fileName
            }
        }

        copy {
            from nativeLibDir
            into platformResourceDir
        }
    }
}

processResources.dependsOn extractNativeLib

test {
    dependsOn extractNativeLib
    
    useJUnitPlatform()

    systemProperty 'java.library.path', file("${buildDir}/native-libs").absolutePath
    jvmArgs '-Djava.library.path=' + file("${buildDir}/native-libs").absolutePath

    doFirst {
        println "Java library path for tests: " + file("${buildDir}/native-libs").absolutePath
    }
}

compileTestJava.dependsOn extractNativeLib

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'enet-jni'
            version = project.version

            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("GITHUB_REPOSITORY") ?: "logykk/enet-jni"}")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("gpr.user") ?: System.getProperty("user.name")
                password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key") ?: ""
            }
        }
    }
}
